---
interface Props {
  currentStep?: number;
  totalSteps?: number;
}
const { currentStep = 2, totalSteps = 4 } = Astro.props;
---

<div class="container">
    <header>
        <h1>Select playlists to move</h1>
        <div class="step-indicator">
            <button class="back-button" aria-label="Go back">
                <i class="fas fa-chevron-left"></i>
            </button>
            <span>STEP {currentStep}/{totalSteps}</span>
        </div>
    </header>
    
    <div class="card" id="url-input-card">
        <h2>Load playlist from URL</h2>
        <p>Copy playlist URL and paste here:</p>
        
        <input 
            type="url" 
            placeholder="Paste playlist URL here"
            class="url-input"
            id="playlist-url"
        />
    
        <button class="load-button" id="load-button">
            Load playlist
        </button>
    </div>

    <div class="card hidden" id="playlist-card">
        <h2>From Your Spotify Account</h2>
        
        <div class="account-row">
            <div class="account-info">
                <img src="/spotify-icon.svg" alt="Spotify" class="platform-icon" />
                <span>My Spotify Music Library</span>
            </div>
            <div class="user-info">
                <span class="username">Justin Crisp</span>
                <i class="fas fa-arrow-right"></i>
            </div>
        </div>

        <div class="playlist-list" id="playlist-display"></div>

        <button class="choose-destination-button" id="next-button">
            Choose Destination
        </button>
    </div>
</div>

<script>
import { SpotifyService } from "../services/spotify";
import { SpotifyPlaylist } from "../models/SpotifyPlaylist";
import { PlaylistState } from '../state/playlistState';

const urlInput = document.getElementById('playlist-url') as HTMLInputElement;
const loadButton = document.getElementById('load-button') as HTMLButtonElement;
const playlistDisplay = document.getElementById('playlist-display') as HTMLDivElement;
const nextButton = document.getElementById('next-button') as HTMLButtonElement;
const urlInputCard = document.getElementById('url-input-card') as HTMLDivElement;
const playlistCard = document.getElementById('playlist-card') as HTMLDivElement;

function showError(message: string) {
    const errorDiv = document.createElement('div');
    errorDiv.className = 'error';
    errorDiv.textContent = message;
    urlInputCard.appendChild(errorDiv);
    setTimeout(() => errorDiv.remove(), 3000);
}

function renderPlaylistPreview(playlist: SpotifyPlaylist) {
    urlInputCard.classList.add('hidden');
    playlistCard.classList.remove('hidden');
    
    playlistDisplay.innerHTML = `
        <div class="playlist-header">
            <div class="checkbox-wrapper">
                <input type="checkbox" checked />
                <span class="checkmark"></span>
            </div>
            <img src="${playlist.images[0]?.url || '/default-playlist.png'}" alt="${playlist.name}" class="playlist-cover" />
            <div class="playlist-info">
                <h3>${playlist.name}</h3>
                <p>${playlist.getTrackCount()}/65 selected</p>
            </div>
            <button class="expand-button">
                <i class="fas fa-chevron-down"></i>
            </button>
        </div>

        <div class="tracks-list">
            ${playlist.tracks.map((track, index) => `
                <div class="track-item">
                    <div class="checkbox-wrapper">
                        <input type="checkbox" checked id="track-${index}" />
                        <span class="checkmark"></span>
                    </div>
                    <img src="${track.track.album.images[0]?.url || '/default-track.png'}" alt="${track.track.name}" class="track-cover" />
                    <div class="track-info">
                        <h4>${track.track.name}</h4>
                        <p>${track.track.artists.map(artist => artist.name).join(', ')}</p>
                    </div>
                </div>
            `).join('')}
        </div>
    `;
}

loadButton.addEventListener('click', async () => {
    const url = urlInput.value.trim();
    const playlistId = url.match(/playlist\/([a-zA-Z0-9]+)/)?.[1];

    if (!playlistId) {
        showError('Invalid Spotify playlist URL');
        return;
    }

    try {
        loadButton.disabled = true;
        loadButton.innerHTML = '<div class="spinner"></div>';
        
        const playlist = await SpotifyService.getPlaylist(playlistId);
        PlaylistState.setPlaylist(playlist);
        renderPlaylistPreview(playlist);
    } catch (error) {
        showError(error instanceof Error ? error.message : 'Failed to load playlist');
    } finally {
        loadButton.disabled = false;
        loadButton.textContent = 'Load playlist';
    }
});

nextButton.addEventListener('click', () => {
    window.location.href = '/select-destination';
});
</script>

<style>
.container {
    min-height: 100vh;
    padding: 2rem;
    background: #1a1b26;
    color: white;
    display: flex;
    flex-direction: column;
    align-items: center;
}

header {
    width: 100%;
    max-width: 800px;
    margin-bottom: 2rem;
    text-align: center;
}

h1 {
    font-size: 3rem;
    font-weight: bold;
    margin-bottom: 1rem;
}

.card {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 1.5rem;
    padding: 2rem;
    width: 100%;
    max-width: 800px;
    text-align: center;
}

h2 {
    font-size: 2.5rem;
    margin-bottom: 1rem;
}

p {
    color: rgba(255, 255, 255, 0.7);
    margin-bottom: 2rem;
}

.url-input {
    width: 100%;
    padding: 1rem;
    border-radius: 0.5rem;
    border: none;
    background: white;
    font-size: 1rem;
    margin-bottom: 1rem;
}

.load-button {
    width: 100%;
    padding: 1rem;
    background: #7C5DFA;
    color: white;
    border: none;
    border-radius: 2rem;
    font-size: 1rem;
    cursor: pointer;
    transition: background 0.2s;
}

.load-button:hover {
    background: #6B4FF8;
}

/* Rest of the styles for playlist preview remain the same */

.hidden {
    display: none;
}

.error {
    color: #ff6b6b;
    text-align: center;
    padding: 1rem;
    margin-top: 1rem;
}

.spinner {
    width: 20px;
    height: 20px;
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    border-top-color: white;
    animation: spin 1s linear infinite;
    margin: 0 auto;
}

@keyframes spin {
    to {
        transform: rotate(360deg);
    }
}

.playlist-header {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 0.5rem;
    margin-bottom: 1rem;
}

.playlist-cover {
    width: 64px;
    height: 64px;
    border-radius: 0.5rem;
    object-fit: cover;
}

.playlist-info {
    flex: 1;
    text-align: left;
}

.playlist-info h3 {
    font-size: 1.25rem;
    margin: 0;
}

.playlist-info p {
    margin: 0.25rem 0 0 0;
    font-size: 0.875rem;
    color: rgba(255, 255, 255, 0.7);
}

.tracks-list {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    margin-top: 1rem;
    max-height: 400px;
    overflow-y: auto;
    padding-right: 0.5rem;
}

.tracks-list::-webkit-scrollbar {
    width: 8px;
}

.tracks-list::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 4px;
}

.tracks-list::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.2);
    border-radius: 4px;
}

.track-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 0.75rem;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 0.5rem;
    transition: background 0.2s;
}

.track-item:hover {
    background: rgba(255, 255, 255, 0.1);
}

.track-cover {
    width: 10px;
    height: 10px;
    border-radius: 0.25rem;
    object-fit: cover;
}

.track-info {
    flex: 1;
    text-align: left;
}

.track-info h4 {
    margin: 0;
    font-size: 1rem;
    font-weight: normal;
}

.track-info p {
    margin: 0.25rem 0 0 0;
    font-size: 0.875rem;
    color: rgba(255, 255, 255, 0.7);
}

.checkbox-wrapper {
    position: relative;
    width: 24px;
    height: 24px;
    flex-shrink: 0;
}

.checkbox-wrapper input[type="checkbox"] {
    opacity: 0;
    position: absolute;
    width: 100%;
    height: 100%;
    cursor: pointer;
    z-index: 1;
}

.checkmark {
    position: absolute;
    top: 0;
    left: 0;
    width: 24px;
    height: 24px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 4px;
    transition: all 0.2s;
}

.checkbox-wrapper input[type="checkbox"]:checked + .checkmark {
    background: #7C5DFA;
}

.checkmark:after {
    content: 'âœ“';
    position: absolute;
    display: none;
    color: white;
    font-size: 14px;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

.checkbox-wrapper input[type="checkbox"]:checked + .checkmark:after {
    display: block;
}

.choose-destination-button {
    position: fixed;
    bottom: 2rem;
    left: 50%;
    transform: translateX(-50%);
    background: #7C5DFA;
    color: white;
    padding: 1rem 2rem;
    border: none;
    border-radius: 2rem;
    font-size: 1rem;
    cursor: pointer;
    transition: all 0.2s;
    width: calc(100% - 4rem);
    max-width: 768px;
    z-index: 10;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
}

.choose-destination-button:hover {
    background: #6B4FF8;
    transform: translateX(-50%) translateY(-2px);
    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.3);
}

/* Add smooth scrollbar for Firefox */
.tracks-list {
    scrollbar-width: thin;
    scrollbar-color: rgba(255, 255, 255, 0.2) rgba(255, 255, 255, 0.1);
}
</style>