---
interface Props {
  currentStep?: number;
  totalSteps?: number;
}
const { currentStep = 2, totalSteps = 4 } = Astro.props;
---

<div class="container">
    <header>
        <h1>Select playlists to move</h1>
        <div class="step-indicator">
          <button class="back-button" aria-label="Go back">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
              <path d="M15 18l-6-6 6-6" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
            </svg>
          </button>
          <span>STEP {currentStep}/{totalSteps}</span>
        </div>
    </header>
    
      <div class="card">
        <h2>Load playlist from URL</h2>
        <p>Copy playlist URL and paste here:</p>
        
        <input 
          type="url" 
          placeholder="Paste playlist URL here"
          class="url-input"
          id="playlist-url"
        />
    
        <button class="load-button" id="load-button">
          Load playlist
        </button>

        <div class="playlist-display hidden" id="playlist-display">
            <!-- PlaylistDisplay will be inserted here -->
        </div>

        <button class="choose-destination-button hidden" id="choose-destination">
        Choose Destination
        </button>
    </div>
</div>

<script>
import { SpotifyService } from "../services/spotify";
import { SpotifyPlaylist } from "../models/SpotifyPlaylist";

  const urlInput = document.getElementById('playlist-url') as HTMLInputElement;
  const loadButton = document.getElementById('load-button') as HTMLButtonElement;
  const playlistDisplay = document.getElementById('playlist-display') as HTMLDivElement;
  const chooseDestination = document.getElementById('choose-destination') as HTMLButtonElement;


  // Function to extract playlist ID from URL
  function getPlaylistId(url: string) {
    const matches = url.match(/playlist\/([a-zA-Z0-9]+)/);
    return matches ? matches[1] : null;
  }

  // Function to show error message
  function showError(message: string) {
    playlistDisplay.innerHTML = `
      <div class="error" style="color: #ff6b6b; text-align: center; padding: 1rem;">
        ${message}
      </div>
    `;
    playlistDisplay.classList.remove('hidden');
    chooseDestination.classList.add('hidden');
  }

  // Function to render playlist
  function renderPlaylist(playlist: SpotifyPlaylist) {
    playlistDisplay.innerHTML = `
      <div class="playlist-content">
        <div class="playlist-header">
          <img src="${playlist.images[0]?.url || '/default-playlist.png'}" alt="${playlist.name}" class="playlist-image" />
          <div class="playlist-info">
            <h3>${playlist.name}</h3>
            <p>${playlist.formatDuration(playlist.getPlaylistDuration())}</p>
            <p>${playlist.getTrackCount()} tracks</p>
          </div>
          <button class="expand-button">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
              <path d="M19 9l-7 7-7-7" stroke="currentColor" stroke-width="2"/>
            </svg>
          </button>
        </div>
        
        <div class="tracks-list">
          ${playlist.tracks.map((item) => `
            <div class="track-item">
              <div class="checkbox">
                <input type="checkbox" checked />
                <span class="checkmark"></span>
              </div>
              <div class="track-info">
                <h4>${item.track.name}</h4>
                <p>${item.track.artists.map(artist => artist.name).join(', ')}</p>
              </div>
            </div>
          `).join('')}
        </div>
      </div>
    `;
    playlistDisplay.classList.remove('hidden');
    chooseDestination.classList.remove('hidden');
}

loadButton.addEventListener('click', async () => {
    const url = urlInput.value.trim();
    const playlistId = getPlaylistId(url);

    if (!url) {
        showError('Please enter a playlist URL');
        return;
    }

    if (!playlistId) {
        showError('Invalid Spotify playlist URL');
        return;
    }

    try {
        // Show loading state with message
        loadButton.disabled = true;
        loadButton.innerHTML = '<div class="spinner"></div>';
        playlistDisplay.innerHTML = `
            <div class="loading-state">
                <div class="spinner"></div>
                <p>Loading playlist...</p>
                <small>This may take a few moments</small>
            </div>
        `;
        playlistDisplay.classList.remove('hidden');
        chooseDestination.classList.add('hidden');

        // Fetch playlist data
        const playlist = await SpotifyService.getPlaylist(playlistId);
        
        // Render the playlist
        renderPlaylist(playlist);

    } catch (error) {
        if (error instanceof Error && error.message.includes('401')) {
            playlistDisplay.innerHTML = `
                <div class="private-playlist">
                    <p>This playlist is private. Please sign in with Spotify to view it.</p>
                    <button class="spotify-login" onclick="window.location.href='/api/auth/spotify'">
                        Sign in with Spotify
                    </button>
                </div>
            `;
        } else {
            showError('Failed to load playlist. Please try again.');
        }
        console.error('Error:', error);
    } finally {
              // Reset button state
              loadButton.disabled = false;
        loadButton.textContent = 'Load playlist';
    }
  });
</script>

<style>
  .container {
    min-height: 100vh;
    padding: 2rem;
    background: #1a1b26;
    color: white;
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  header {
    width: 100%;
    max-width: 800px;
    margin-bottom: 2rem;
  }

  h1 {
    font-size: 3rem;
    font-weight: bold;
    text-align: center;
    margin-bottom: 1rem;
  }

  .step-indicator {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 1rem;
    font-size: 1rem;
    color: #fff;
  }

  .back-button {
    background: none;
    border: none;
    color: white;
    cursor: pointer;
    padding: 0.5rem;
    display: flex;
    align-items: center;
    transition: opacity 0.2s;
  }

  .back-button:hover {
    opacity: 0.8;
  }

  .card {
    background: #252638;
    padding: 2rem;
    border-radius: 1rem;
    width: 100%;
    max-width: 800px;
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  h2 {
    font-size: 2rem;
    font-weight: bold;
    text-align: center;
  }

  p {
    text-align: center;
    color: #a9adc1;
  }

  .url-input {
    padding: 1rem;
    border-radius: 0.5rem;
    border: none;
    background: white;
    font-size: 1rem;
    width: 100%;
  }

  .url-input::placeholder {
    color: #a9adc1;
  }

  .load-button {
    background: #7C5DFA;
    color: white;
    padding: 1rem;
    border: none;
    border-radius: 4px; /* Changed from 2rem to 4px for partial rounding */
    font-size: 1rem;
    cursor: pointer;
    transition: background 0.2s;
  }

  .load-button:hover {
    background: #6B4FF8;
  }
  .choose-destination-button {
    background: #7C5DFA;
    color: white;
    padding: 1rem;
    border: none;
    border-radius: 4px;
    font-size: 1rem;
    cursor: pointer;
    width: 100%;
    margin-top: 1rem;
  }

  .choose-destination-button:hover {
    background: #6B4FF8;
  }
  .hidden {
    display: none;
  }

  .playlist-display {
    margin-top: 1.5rem;
  }

  .loading {
    opacity: 0.7;
    cursor: not-allowed;
  }

  /* Loading spinner */
  .spinner {
    width: 24px;
    height: 24px;
    border: 3px solid rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    border-top-color: white;
    animation: spin 1s linear infinite;
    margin: 0 auto;
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  .loading-state {
    text-align: center;
    padding: 2rem;
    color: #a9adc1;
  }

  .loading-state .spinner {
    margin-bottom: 1rem;
  }

  .loading-state p {
    margin-bottom: 0.5rem;
    color: white;
  }

  .loading-state small {
    color: #a9adc1;
  }

  .playlist-image {
    width: 64px;
    height: 64px;
    border-radius: 4px;
    object-fit: cover;
  }

  .playlist-header {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 4px;
  }

  .playlist-info {
    flex: 1;
  }

  .playlist-info h3 {
    margin: 0;
    font-size: 1.2rem;
  }

  .playlist-info p {
    margin: 0.25rem 0 0 0;
    font-size: 0.9rem;
    color: #a9adc1;
  }

  .tracks-list {
    margin-top: 1rem;
  }

  .track-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 0.75rem;
    border-radius: 4px;
    transition: background 0.2s;
  }

  .track-item:hover {
    background: rgba(255, 255, 255, 0.05);
  }
</style>