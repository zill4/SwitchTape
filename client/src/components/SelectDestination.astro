<!-- ---
interface Props {
    currentStep?: number;
    totalSteps?: number;
    platform?: string;
}
const { currentStep = 3, totalSteps = 4, platform = 'spotify' } = Astro.props;

const platforms = [
    { id: 'spotify', name: 'Spotify', icon: 'fab fa-spotify', isSource: platform === 'spotify' },
    { id: 'apple', name: 'Apple Music', icon: 'fab fa-apple', isSource: platform === 'apple' },
    { id: 'youtube', name: 'YouTube', icon: 'fab fa-youtube', isSource: platform === 'youtube' },
    { id: 'deezer', name: 'Deezer', icon: 'fas fa-music', isSource: platform === 'deezer' },
    { id: 'tidal', name: 'Tidal', icon: 'fas fa-wave-square', isSource: platform === 'tidal' },
    { id: 'amazon', name: 'Amazon Music', icon: 'fab fa-amazon', isSource: platform === 'amazon' },
    { id: 'soundcloud', name: 'SoundCloud', icon: 'fab fa-soundcloud', isSource: platform === 'soundcloud' },
];
---

<div class="container">
    <header>
        <h1>Select Destination</h1>
        <div class="step-indicator">
            <a href="/load-playlist" class="back-button">
                <i class="fas fa-chevron-left"></i>
            </a>
            <span>STEP {currentStep}/{totalSteps}</span>
        </div>
    </header>

    <div class="search-container">
        <i class="fas fa-search search-icon"></i>
        <input 
            type="text" 
            id="platform-search" 
            placeholder="Search a platform" 
            class="search-input"
        />
    </div>

    <div class="platforms-grid" id="platforms-grid">
        {platforms.map(platform => (
            <button 
                class={`platform-card ${platform.isSource ? 'source' : ''}`} 
                data-platform-id={platform.id}
                disabled={platform.isSource}
            >
                {platform.isSource && <span class="source-badge">Source</span>}
                <img src={platform.icon} alt={platform.name} class="platform-logo" />
                <span class="platform-name">{platform.name}</span>
            </button>
        ))}
    </div>

<script>
import { PlaylistState } from '../state/playlistState';
import { AppleMusicService } from '../services/AppleMusic';
import type { GenericTrack } from '../models/Playlist';

document.addEventListener('DOMContentLoaded', async () => {
    const state = PlaylistState.getState();
    if (!state.sourcePlaylist) {
        window.location.href = '/load-playlist';
        return;
    }

    const platformsGrid = document.getElementById('platforms-grid');
    const searchInput = document.getElementById('platform-search') as HTMLInputElement;
    const nextButton = document.createElement('button');
    nextButton.className = 'next-button hidden';
    nextButton.id = 'next-button';
    nextButton.textContent = 'Convert Playlist';
    document.querySelector('.container')?.appendChild(nextButton);

    platformsGrid?.addEventListener('click', async (e) => {
        const card = (e.target as HTMLElement).closest('.platform-card');
        if (card && !card.classList.contains('source')) {
            const platformId = ((card as HTMLElement).dataset.platformId as string) || '';
            
            if (platformId === 'apple') {
                try {
                    const appleMusic = AppleMusicService.getInstance();
                    await appleMusic.authorize();
                    
                    document.querySelector('.platform-card.selected')?.classList.remove('selected');
                    card.classList.add('selected');
                    nextButton.classList.remove('hidden');
                    PlaylistState.setDestination(platformId);
                } catch (error) {
                    showError('Failed to authorize Apple Music');
                }
            }
        }
    });

    nextButton.addEventListener('click', async () => {
        const playlist = PlaylistState.getSourcePlaylist();
        if (!playlist) return;

        try {
            nextButton.disabled = true;
            showConversionProgress();

            const appleMusic = AppleMusicService.getInstance();
            const playlistId = await appleMusic.createPlaylist(playlist.name, playlist.description);
            
            const progressContainer = document.getElementById('conversion-progress');
            const progressList = document.getElementById('progress-list');
            const successCount = document.getElementById('success-count');
            const totalCount = document.getElementById('total-count');
            
            if (totalCount) totalCount.textContent = playlist.tracks.length.toString();
            let converted = 0;

            // Track conversion progress
            for (const track of playlist.tracks) {
                const trackId = await appleMusic.searchTrack(track.track);
                const listItem = document.createElement('div');
                listItem.className = 'progress-item';
                
                if (trackId) {
                    converted++;
                    listItem.innerHTML = `
                        <i class="fas fa-check success"></i>
                        <span>${track.track.name} - ${track.track.artists[0].name}</span>
                    `;
                } else {
                    listItem.innerHTML = `
                        <i class="fas fa-times failure"></i>
                        <span>${track.track.name} - ${track.track.artists[0].name}</span>
                    `;
                }
                
                progressList?.appendChild(listItem);
                if (successCount) successCount.textContent = converted.toString();
            }

            await appleMusic.addTracksToPlaylist(playlistId, playlist.tracks.map((t: { track: GenericTrack; }) => t.track as GenericTrack));
            showConversionComplete(converted, playlist.tracks.length);
        } catch (error) {
            showError('Failed to convert playlist');
        } finally {
            nextButton.disabled = false;
        }
    });
});

function showConversionProgress() {
    const progressHtml = `
        <div id="conversion-progress" class="conversion-progress">
            <h3>Converting Playlist</h3>
            <div class="progress-header">
                <span>Successfully converted: <span id="success-count">0</span>/<span id="total-count">0</span></span>
            </div>
            <div id="progress-list" class="progress-list"></div>
        </div>
    `;
    
    document.getElementById('platforms-grid')?.insertAdjacentHTML('afterend', progressHtml);
}

function showConversionComplete(converted: number, total: number) {
    const completeHtml = `
        <div class="conversion-complete">
            <h3>Conversion Complete!</h3>
            <p>Successfully converted ${converted} out of ${total} tracks</p>
            <a href="/your-apple-music-link" class="view-playlist-button">
                View in Apple Music
            </a>
        </div>
    `;
    
    document.getElementById('conversion-progress')?.insertAdjacentHTML('beforeend', completeHtml);
}

function showError(message: string) {
    const errorDiv = document.createElement('div');
    errorDiv.className = 'error';
    errorDiv.textContent = message;
    document.querySelector('.container')?.appendChild(errorDiv);
    setTimeout(() => errorDiv.remove(), 3000);
}
</script>

<style>
    .container {
    min-height: 100vh;
    padding: 2rem;
    background: #1a1b26;
    color: white;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 2rem;
}

header {
    width: 100%;
    max-width: 1200px;
    text-align: center;
}

h1 {
    font-size: 3rem;
    margin-bottom: 1rem;
}

.step-indicator {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 1rem;
    color: #fff;
    opacity: 0.8;
}
    .search-container {
    position: relative;
    width: 100%;
    max-width: 1200px;
}

.search-input {
    width: 100%;
    padding: 1rem 1rem 1rem 3rem;
    border-radius: 1rem;
    border: none;
    background: rgba(255, 255, 255, 0.1);
    color: white;
    font-size: 1rem;
}

.search-icon {
    position: absolute;
    left: 1rem;
    top: 50%;
    transform: translateY(-50%);
    color: rgba(255, 255, 255, 0.5);
}

    .platforms-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 1rem;
    width: 100%;
    max-width: 1200px;
}

.platform-card {
    position: relative;
    aspect-ratio: 1;
    border-radius: 1.5rem;
    border: none;
    background: rgba(255, 255, 255, 0.1);
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s ease;
    padding: 2rem;
}

    .platform-card:hover {
    background: rgba(255, 255, 255, 0.15);
    transform: translateY(-2px);
}

.platform-card.selected {
    border: 2px solid #7C5DFA;
    background: rgba(124, 93, 250, 0.1);
}

.platform-logo {
    width: 100%;
    height: 100%;
    object-fit: contain;
}

.source-badge {
    position: absolute;
    top: 1rem;
    left: 1rem;
    background: #7C5DFA;
    color: white;
    padding: 0.25rem 0.75rem;
    border-radius: 1rem;
    font-size: 0.875rem;
}
.next-button {
    background: #7C5DFA;
    color: white;
    padding: 1rem 2rem;
    border: none;
    border-radius: 0.5rem;
    font-size: 1rem;
    cursor: pointer;
    transition: background 0.2s;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.next-button:hover {
    background: #6B4FF8;
}

.hidden {
    display: none;
}

.conversion-progress {
    width: 100%;
    max-width: 800px;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 1.5rem;
    padding: 2rem;
    margin-top: 2rem;
}

.progress-header {
    display: flex;
    justify-content: space-between;
    margin-bottom: 1rem;
    color: rgba(255, 255, 255, 0.7);
}

.progress-list {
    max-height: 300px;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.progress-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 0.5rem;
}

.success {
    color: #4CAF50;
}

.failure {
    color: #f44336;
}

.conversion-complete {
    margin-top: 2rem;
    text-align: center;
}

.view-playlist-button {
    display: inline-block;
    background: #7C5DFA;
    color: white;
    padding: 1rem 2rem;
    border-radius: 2rem;
    text-decoration: none;
    margin-top: 1rem;
    transition: all 0.2s;
}

.view-playlist-button:hover {
    background: #6B4FF8;
    transform: translateY(-2px);
}

.error {
    position: fixed;
    bottom: 2rem;
    left: 50%;
    transform: translateX(-50%);
    background: #f44336;
    color: white;
    padding: 1rem 2rem;
    border-radius: 0.5rem;
    animation: fadeIn 0.3s ease;
}

@keyframes fadeIn {
    from { opacity: 0; transform: translateX(-50%) translateY(1rem); }
    to { opacity: 1; transform: translateX(-50%) translateY(0); }
}
</style> -->